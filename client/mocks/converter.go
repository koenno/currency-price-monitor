// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	request "github.com/koenno/currency-price-monitor/request"
	mock "github.com/stretchr/testify/mock"
)

// Converter is an autogenerated mock type for the Converter type
type Converter[T interface{}] struct {
	mock.Mock
}

type Converter_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *Converter[T]) EXPECT() *Converter_Expecter[T] {
	return &Converter_Expecter[T]{mock: &_m.Mock}
}

// Convert provides a mock function with given fields: from
func (_m *Converter[T]) Convert(from T) request.Currency {
	ret := _m.Called(from)

	var r0 request.Currency
	if rf, ok := ret.Get(0).(func(T) request.Currency); ok {
		r0 = rf(from)
	} else {
		r0 = ret.Get(0).(request.Currency)
	}

	return r0
}

// Converter_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type Converter_Convert_Call[T interface{}] struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - from T
func (_e *Converter_Expecter[T]) Convert(from interface{}) *Converter_Convert_Call[T] {
	return &Converter_Convert_Call[T]{Call: _e.mock.On("Convert", from)}
}

func (_c *Converter_Convert_Call[T]) Run(run func(from T)) *Converter_Convert_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *Converter_Convert_Call[T]) Return(_a0 request.Currency) *Converter_Convert_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Converter_Convert_Call[T]) RunAndReturn(run func(T) request.Currency) *Converter_Convert_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewConverter creates a new instance of Converter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConverter[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Converter[T] {
	mock := &Converter[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
