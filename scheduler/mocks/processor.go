// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	request "github.com/koenno/currency-price-monitor/request"
	mock "github.com/stretchr/testify/mock"
)

// Processor is an autogenerated mock type for the Processor type
type Processor struct {
	mock.Mock
}

type Processor_Expecter struct {
	mock *mock.Mock
}

func (_m *Processor) EXPECT() *Processor_Expecter {
	return &Processor_Expecter{mock: &_m.Mock}
}

// Process provides a mock function with given fields: _a0, _a1
func (_m *Processor) Process(_a0 context.Context, _a1 request.Descriptor) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Descriptor) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Processor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type Processor_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 request.Descriptor
func (_e *Processor_Expecter) Process(_a0 interface{}, _a1 interface{}) *Processor_Process_Call {
	return &Processor_Process_Call{Call: _e.mock.On("Process", _a0, _a1)}
}

func (_c *Processor_Process_Call) Run(run func(_a0 context.Context, _a1 request.Descriptor)) *Processor_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.Descriptor))
	})
	return _c
}

func (_c *Processor_Process_Call) Return(_a0 error) *Processor_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Processor_Process_Call) RunAndReturn(run func(context.Context, request.Descriptor) error) *Processor_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewProcessor creates a new instance of Processor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Processor {
	mock := &Processor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
